FORMAT: 1A
HOST: http://gisela.apiblueprint.org/

# Gisela API

Gisela is a simple API allowing consumers to track and tag timelogs.

## Tags Collection [/tags]

Timelogs can be tagged to identify the time for later evaluation.

### List All Tags [GET]

+ Response 200 (application/json)

    {
        "status": "success",
        "data": {
            "id": 1,
            "name": "Foo",
            "description": "Foo description"
        }
    }

### Create a New Tag [POST]

You may create your tags using this action. It takes a JSON
object containing the name and a short description of the tag.

+ Request (application/json)

    {
        "name": "Foo",
        "description": "Foo description"
    }

+ Response 201 (application/json)

    + Headers

        Location: /questions/2

    + Body

        {
            "status": "success",
            "data": {
                "id": 1,
                "name": "Foo",
                "description": "Foo description"
            }
        }

## Tag [/tag/{tag_id}]

+ Parameters
    + tag_id (number) - ID of the Tag in the form of an integer

### Read a tag detail [GET]

+ Response 200 (application/json)

    {
        "status": "success",
        "data": {
            "id": 1,
            "name": "Foo",
            "description": "Foo description"
        }
    }

### Update a tag detail [PUT]

You may update the details of a tag using this action. It takes a JSON
object containing the name and a short description of the tag.

+ Request (application/json)

    {
        "name": "Foo",
        "description": "Foo description"
    }

+ Response 200 (application/json)

    {
        "status": "success",
        "data": {
            "id": 1,
            "name": "Foo",
            "description": "Foo description"
        }
    }

### Delete a tag [DELETE]

You can delete a tag using this action.

+ Response 204

## Timelogs Collection [/times]

A timelog description a period of time defined by its duration.

### List All Timelogs [GET]

+ Response 200 (application/json)

    {
        "status": "success",
        "data": {
            "id": 1,
            "name": "Bar",
            "start_data": "2015-11-18 20:53:00",
            "duration": 50,
            "description": "Bar description",
            "state": 1,
            "tags": []
        }
    }

### Create a New Timelog [POST]

You may create your tags using this action. It takes a JSON
object containing the name and a short description of the tag.

+ Request (application/json)

    {
        "status": "success",
        "data": {}
        "name": "Bar",
        "start_data": "2015-11-18 20:53:00",
        "duration": 50,
        "description": "Bar description",
        "tags": [1, 2]
    }

+ Response 201 (application/json)

    + Headers

        Location: /times/1

    + Body

        {
            "status": "success",
            "data": {
                "id": 1,
                "name": "Bar",
                "start_data": "2015-11-18 20:53:00",
                "duration": 50,
                "description": "Bar description",
                "state": 0,
                "tags": [
                    {
                        "id": 1,
                        "name": "Foo",
                        "description": "Foo description"
                    },
                    {
                        "id": 2,
                        "name": "Baz",
                        "description": "Baz description"
                    }
                ]
            }
        }

## Timelog [/tag/{timelog_id}]

+ Parameters
    + timelog_id (number) - ID of the Timelog in the form of an integer

### Read a timelog detail [GET]

+ Response 200 (application/json)

    {
        "status": "success",
        "data": {
            "id": 1,
            "name": "Bar",
            "start_data": "2015-11-18 20:53:00",
            "duration": 50,
            "description": "Bar description",
            "tags": [
                {
                    "id": 1,
                    "name": "Foo",
                    "description": "Foo description"
                },
                {
                    "id": 2,
                    "name": "Baz",
                    "description": "Baz description"
                }
            ]
        }
    }

### Update a timelog detail [PUT]

You may update the details of a timelog using this action. It takes a JSON
object containing the following data.

+ Request (application/json)

    {
        "name": "Bar",
        "start_data": "2015-11-18 20:53:00",
        "duration": 50,
        "description": "Bar description",
        "tags": [1, 2]
    }

+ Response 200 (application/json)

    {
        "status": "success",
        "data": {
            "id": 1,
            "name": "Bar",
            "start_data": "2015-11-18 20:53:00",
            "duration": 50,
            "description": "Bar description",
            "state": 1,
            "tags": [
                {
                    "id": 1,
                    "name": "Foo",
                    "description": "Foo description"
                },
                {
                    "id": 2,
                    "name": "Baz",
                    "description": "Baz description"
                }
            ]
        }
    }

### Delete a timelog [DELETE]

You can delete a timelog using this action.

+ Response 204

### Start a timelog [PUT /times/{timelog_id}/start]

+ Response 200 (application/json)

    {
        "status": "success",
        "data": {
            "id": 1,
            "name": "Bar",
            "start_data": "2015-11-18 20:53:00",
            "duration": 50,
            "description": "Bar description",
            "state": 1,
            "tags": [
                {
                    "id": 1,
                    "name": "Foo",
                    "description": "Foo description"
                },
                {
                    "id": 2,
                    "name": "Baz",
                    "description": "Baz description"
                }
            ]
        }
    }

### Pause a timelog [PUT /times/{timelog_id}/start]

+ Response 200 (application/json)

    {
        "status": "success",
        "data": {
            "id": 1,
            "name": "Bar",
            "start_data": "2015-11-18 20:53:00",
            "duration": 50,
            "description": "Bar description",
            "state": 2,
            "tags": [
                {
                    "id": 1,
                    "name": "Foo",
                    "description": "Foo description"
                },
                {
                    "id": 2,
                    "name": "Baz",
                    "description": "Baz description"
                }
            ]
        }
    }

### Stop a timelog [PUT /times/{timelog_id}/stop]

+ Response 200 (application/json)

    {
        "status": "success",
        "data": {
            "id": 1,
            "name": "Bar",
            "start_data": "2015-11-18 20:53:00",
            "duration": 50,
            "description": "Bar description",
            "state": 0,
            "tags": [
                {
                    "id": 1,
                    "name": "Foo",
                    "description": "Foo description"
                },
                {
                    "id": 2,
                    "name": "Baz",
                    "description": "Baz description"
                }
            ]
        }
    }
